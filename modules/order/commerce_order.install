<?php

/**
 * @file
 * Install, update and uninstall functions for the Order module.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Session\AccountInterface;
use Drupal\commerce_order\Entity\Order;

/**
 * Implements hook_install().
 */
function commerce_order_install() {
  // Allow authenticated users to view own orders.
  user_role_grant_permissions(AccountInterface::AUTHENTICATED_ROLE, ['view own commerce_order']);
}

/**
 * Add the 'data' field to 'commerce_order_item' entities.
 */
function commerce_order_update_8201() {
  $storage_definition = BaseFieldDefinition::create('map')
    ->setLabel(t('Data'))
    ->setDescription(t('A serialized array of additional data.'));

  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $update_manager->installFieldStorageDefinition('data', 'commerce_order_item', 'commerce_order', $storage_definition);
}

/**
 * Add the 'overridden_unit_price' field to 'commerce_order_item' entities.
 */
function commerce_order_update_8202() {
  $storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Overridden unit price'))
    ->setDescription(t('Whether the unit price is overridden.'))
    ->setDefaultValue(FALSE);

  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $update_manager->installFieldStorageDefinition('overridden_unit_price', 'commerce_order_item', 'commerce_order', $storage_definition);
}

/**
 * Add the 'locked' field to 'commerce_order' entities.
 */
function commerce_order_update_8203() {
  $storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Locked'))
    ->setSettings([
      'on_label' => t('Yes'),
      'off_label' => t('No'),
    ])
    ->setDefaultValue(FALSE);

  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $update_manager->installFieldStorageDefinition('locked', 'commerce_order', 'commerce_order', $storage_definition);
}

/**
 * Add the 'uses_legacy_adjustments' field to 'commerce_order_item' entities.
 */
function commerce_order_update_8204() {
  $storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Uses legacy adjustments'))
    ->setSettings([
      'on_label' => t('Yes'),
      'off_label' => t('No'),
    ])
    ->setDefaultValue(FALSE)
    ->setInitialValue(TRUE);

  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $update_manager->installFieldStorageDefinition('uses_legacy_adjustments', 'commerce_order_item', 'commerce_order', $storage_definition);
}

/**
 * Add the 'total_paid' field to 'commerce_order' entities.
 */
function commerce_order_update_8205() {
  $storage_definition = BaseFieldDefinition::create('commerce_price')
    ->setLabel(t('Total paid'))
    ->setDescription(t('The total paid price of the order.'))
    ->setDisplayConfigurable('form', FALSE)
    ->setDisplayConfigurable('view', TRUE);

  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $update_manager->installFieldStorageDefinition('total_paid', 'commerce_order', 'commerce_order', $storage_definition);
}

/**
 * Clears the address book for all customers, to avoid duplicates.
 */
function commerce_order_update_8206() {
  // Bypass Entity API for better performance.
  $database = \Drupal::database();
  $database->query("UPDATE {profile} SET uid = 0 WHERE type = 'customer'");
  $database->query("UPDATE {profile_revision} SET uid = 0 WHERE profile_id IN (SELECT profile_id FROM {profile} WHERE type = 'customer')");
}

/**
 * Convert the 'order_items' configurable field into a base field.
 */
function commerce_order_update_8207() {
  $bundle_info = \Drupal::service('entity_type.bundle.info')->getBundleInfo('commerce_order');
  $order_types = array_keys($bundle_info);
  $config_factory = \Drupal::configFactory();
  $config_manager = \Drupal::service('config.manager');
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_field_manager = \Drupal::service('entity_field.manager');

  $entity_type_manager->clearCachedDefinitions();
  $entity_field_manager->clearCachedFieldDefinitions();

  $entity_definitions_installed = \Drupal::keyValue('entity.definitions.installed');
  $key = 'commerce_order.field_storage_definitions';
  $definitions = $entity_definitions_installed->get($key);

  /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $base_field_definitions */
  $base_field_definitions = $entity_field_manager->getBaseFieldDefinitions('commerce_order');
  $definitions['order_items'] = $base_field_definitions['order_items']->getFieldStorageDefinition();
  $entity_definitions_installed->set($key, $definitions);

  $configurations_to_delete = [];
  foreach ($order_types as $bundle) {
    $configurations_to_delete[] = 'field.field.commerce_order.' . $bundle . '.order_items';
  }
  $configurations_to_delete[] = 'field.storage.commerce_order.order_items';

  $dependents = $config_manager->findConfigEntityDependents('config', $configurations_to_delete);

  /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $config_entity */
  foreach ($dependents as $config_name => $config_entity) {
    $config_entity = $config_factory->getEditable($config_name);
    $dependencies = $config_entity->get('dependencies.config');
    $dependencies = array_diff($dependencies, $configurations_to_delete);
    $config_entity->set('dependencies.config', $dependencies);
    $config_entity->save();
  }

  foreach ($configurations_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }
}

/**
 * Update all existing views using a reference to commerce_order_items.
 */
function commerce_order_update_8208() {
  $config_factory = \Drupal::configFactory();

  foreach ($config_factory->listAll('views.view.') as $view_config_name) {
    $view = $config_factory->getEditable($view_config_name);
    $displays = $view->get('display');
    foreach ($displays as $display_name => $display) {
      if (!empty($display['display_options']['relationships'])) {
        foreach ($display['display_options']['relationships'] as $relationship_name => $relationship) {
          if ($relationship_name == 'order_items') {
            // Update the relation field and add entity information.
            $base = "display.$display_name.display_options.relationships.$relationship_name";
            $view->set($base . '.field', $relationship_name . '_target_id');
            $view->set($base . '.entity_type', 'commerce_order');
            $view->set($base . '.entity_field', $relationship_name);
          }
        }
      }

      if (!empty($display['display_options']['fields'])) {
        foreach ($display['display_options']['fields'] as $field_name => $field) {
          if ($field_name == 'order_items') {
            // Update the relation field and add entity information.
            $base = "display.$display_name.display_options.fields.$field_name";
            $view->set($base . '.field', $field_name . '_target_id');
          }
        }
      }
    }
    $view->save(TRUE);
  }
}
